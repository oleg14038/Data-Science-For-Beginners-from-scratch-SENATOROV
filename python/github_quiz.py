"""Github quiz."""

#
# 1.1. Что такое GitHub?
#
# GitHub — это платформа для хостинга и управления репозиториями Git. Она предоставляет возможности для совместной работы, контроля версий, отслеживания изменений и создания Pull Request'ов.
#
# 1.2. Как GitHub связан с Git?
#
# GitHub использует Git — распределённую систему контроля версий. GitHub предоставляет удалённый хостинг для репозиториев, созданных с использованием Git, и инструменты для совместной работы, такие как Pull Request'ы, issues и wiki.
#
# 1.3. Чем отличается fork репозитория от его клонирования (clone)?
#
# Fork — это создание копии репозитория на своем аккаунте на GitHub. Это позволяет работать с репозиторием без воздействия на оригинальный.
#
# Clone — это создание локальной копии репозитория на вашем компьютере для работы с ним в Git.
#
# 1.4. Зачем нужны и как работают pull requests?
#
# Request (PR) — это запрос на слияние изменений из одной ветки в другую. Это позволяет предложить изменения в репозиторий и дать возможность другим участникам проекта обсудить и просмотреть эти изменения перед слиянием.
#
# 1.5. GitHub использует ваш почтовый адрес для привязки ваших Git коммитов к вашей учётной записи?
#
# GitHub использует почтовый адрес, указанный в конфигурации Git, для связывания ваших коммитов с вашим профилем на GitHub. Это позволяет показывать авторство коммитов в интерфейсе GitHub
#
# 1.6. Какая команда генерирует SSH ключ для доступа по SSH к репозиторию?
#
# ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
#
#

# 2.
# https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/issues/247
#
# 2.1 https://github.com/oleg14038/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/Oleg14038
#
# 2.2 https://github.com/oleg14038/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/dev
#
# 2.3 done
#
# 2.4 https://github.com/oleg14038/Data-Science-For-Beginners-from-scratch-SENATOROV/pull/1
#
# 2.5 https://github.com/oleg14038/Data-Science-For-Beginners-from-scratch-SENATOROV/pull/1/files/397422b73cbd67388207a7c2a734ecb185afb20b diff-5e25151a4a482c3c4676216ece50a70a51f8d4b2adb42e04a2322b9c2586bd24
#
# 2.6 https://github.com/oleg14038/Data-Science-For-Beginners-from-scratch-SENATOROV/pulls?q=is%3Apr+is%3Aclosed
#
# 2.8 Как посмотреть какие файлы были в репозитории на момент определенного коммита? вставьте сюда ссылку на любой коммит, где взять ссылку? подсказка
#
#
#   Перейдите в репозиторий на GitHub (например, https://github.com/torvalds/linux).
#
#   Нажмите на вкладку "Commits" — она обычно находится рядом с надписью "X commits":
#
#   Пример: https://github.com/torvalds/linux/commits/master
#
#   Выберите нужный коммит и нажмите на его хеш (обычно первые 7 символов) или на заголовок коммита.
#
#
# 2.9 как открыть запрос слияния, указывающий на другой запрос слияния и зачем это нужно?
#
#   Открыть запрос слияния (pull request), который указывает на другой запрос слияния, означает создать PR, который зависит от другого PR — например, когда новая фича или исправление основываются на незавершённой работе из другого PR.
#
#  Зачем это нужно?
#     Чтобы разделить большой PR на более мелкие, удобные для ревью.
#
#     Чтобы работать параллельно над несколькими частями одной задачи, где один PR не может быть принят без другого.
#
#     Чтобы показать последовательность изменений, а не всё сразу.
#
#     Рабочий процесс с использованием GitHub

# 3 Напишите 8 пунктов, которые нужно сделать, чтобы внести вклад в чужой проект.
#
#   Найти подходящий проект
#   Найдите репозиторий, в который вы хотите внести вклад — например, на GitHub через теги good first issue, help wanted и т. д.
#
#
#   Форкнуть репозиторий
#   Нажмите кнопку Fork на GitHub, чтобы создать свою копию проекта в своем аккаунте.
#
#
#   Клонировать форк себе на компьютер git clone https://github.com/ваше_имя/проект.git
#
#
#   Создать новую ветку для изменений git checkout -b имя-ветки
#
#   Внести изменения и закоммитить
#   Отредактируйте файлы, а затем:
#
#   git add .
#   git commit -m "Краткое описание изменений"
#
#   Отправить ветку в свой форк - git push origin имя-ветки
#
#   Открыть Pull Request (запрос на слияние)
#   Перейдите на GitHub и нажмите "Compare & pull request". Опишите, что вы изменили и зачем.
#
#
#   Обсудить изменения с мейнтейнерами
#   Ответьте на замечания, при необходимости внесите правки. После одобрения ваш вклад может быть принят в основной проект.
#
#
# 3.1  Упомянуть номер issue в описании PR
#
#   Укажите ссылку на issue в теле PR с ключевыми словами, например: Fixes  42,Closes  101, Resolves  7
#
#   Использовать точную формулировку
#
#   Поддерживаются только строго определённые ключевые слова, например:
#
#   Fixes  <номер>
#
#   Closes  <номер>
#
#   Resolves  <номер>
#
#
#   Размещать ссылку в теле PR, а не в заголовке
#
#   GitHub автоматически обрабатывает только ссылки из описания PR, а не из названия.
#
#   Использовать одну строку на каждый issue (если их несколько) - Fixes  10, Fixes  12, Resolves  15
#
#
#   Писать осмысленное описание PR
#
#   Объясните, что именно сделано и почему, особенно если PR закрывает issue — это упрощает ревью
#
#
#
#   Связывать только реально решаемые issue
#
#   Не стоит указывать Fixes  X, если PR не решает issue полностью — лучше использовать See  X или Related to  X.
#
#
#   Проверить, что ветка PR нацелена на правильную базовую ветку
#
#   Например, main, develop или release, в зависимости от политики проекта.
#
#
#   Какие практики принято соблюдать при создании commit чтобы закрыть автоматический issues?
#
#   Fixes  номер
#   Closes  номер
#   Resolves  номер
#
#   Исправлена ошибка с путём к файлу. Fixes  42
#
#   Убедиться, что коммит будет включён в Pull Request в main/default ветку -GitHub не закроет issue, если коммит не попадёт в основную ветку через слияние Pull Request. Просто наличие коммита в другой ветке не работает
#
#   Размещать ключевое слово в теле коммита (а не только в заголовке) -
#
#   feat: добавлена проверка на пустую строку
#
#   Fixes  123
#
#   Можно закрыть несколько issues сразу
#
#   Fixes  10
#   Closes  11
#   Resolves  12
#
#   Не использовать сокращённые или неточные слова
#
#   Fix  123     ❌ (не сработает)
#   Fixed 123    ❌ (не сработает)
#   Closes issue  123 ❌ (не сработает)
#
#   Проверять, что issue действительно решён
#
#   Если коммит не закрывает issue полностью, используйте
#
#   Related to  123
#   See  123
#   Partial fix for  123
#
#   Соблюдать стиль коммитов проекта (если есть)
#
#   Многие проекты используют шаблоны типа Conventional Commits:
#
#   fix(login): добавлена проверка на пустой email
#
#   Fixes  101
#
#   Оформлять коммиты чисто и понятно
#
#   Коммиты должны быть атомарными, логичными, с понятным сообщением — это упрощает ревью и делает историю проекта читаемой.
#
#
#
#
#
# 3.2 Как отклонить/закрыть пул реквест? (предоставьте скриншот где это в гитхабе)
#
#   Чтобы отклонить или закрыть Pull Request (PR) на GitHub, выполните следующие шаги:
#
#   Как закрыть Pull Request через веб-интерфейс GitHub
#
#   Перейдите в репозиторий, где находится PR.
#
#   Нажмите на вкладку "Pull requests".
#
#   Выберите нужный PR из списка.
#
#   Прокрутите страницу вниз до нижней части обсуждения PR.
#
#   Нажмите кнопку "Close pull request".
#
#   При необходимости добавьте комментарий с объяснением причины закрытия.
#
#   Когда стоит закрывать PR
#
#   Изменения в PR больше не актуальны.
#
#   Проблема решена другим способом.
#
#   PR содержит ошибки или не соответствует требованиям проекта.
#
#   Автор PR неактивен, и продолжение работы невозможно.
#
#   Дополнительные советы
#
#   Если вы хотите отклонить только рецензию, а не весь PR, используйте опцию "Dismiss review" рядом с обзором изменений.
#
#   После закрытия PR вы можете удалить связанную ветку, чтобы поддерживать порядок в репозитории.
#
#   Если PR был закрыт по ошибке, его можно восстановить, нажав "Reopen pull request".
#
#   ![ЗАКРЫТИЕ PR](C:\Users\adm\Documents\GitHub\Data-Science-For-Beginners-from-scratch-SENATOROV\python\ЗАКРЫТИЕ_PR.png)
#
#   Перед отправкой пул реквеста нужно ли создавать ишьюс?
#
#   Создавать issue перед отправкой Pull Request (PR) — не обязательно, но в некоторых случаях это рекомендуется. Вот как это зависит от ситуации:
#
#   Когда нужно или желательно создавать issue:
#
#   В проекте так принято
#   Некоторые проекты требуют, чтобы каждый PR ссылался на соответствующий issue — это помогает отслеживать задачи.
#
#   Изменение связано с багом или новой фичей
#   Лучше сначала описать проблему в issue, получить подтверждение от мейнтейнеров, а уже потом делать PR.
#
#   Это экономит время: вдруг PR не нужен или делается в неправильном направлении.
#
#   Вы не уверены, нужно ли это изменение
#   Создайте issue, опишите, что хотите изменить, и дождитесь обратной связи.
#
#
#   Когда можно не создавать issue:
#
#   Мелкие правки — например, опечатки, незначительный рефакторинг, исправление ссылки.
#
#   Проект разрешает PR без issue — это часто указывается в CONTRIBUTING.md.
#
#   Вы уже обсудили изменение в другом месте — например, в комментариях к другому PR или в чате команды.
#
#   Как объединить issue и PR
#
#   В описании PR используйте: Fixes  номер
#
#
#   В какой вкладке можно посмотреть список изменений который был в пул реквесте?
#
#   Список изменений в Pull Request на GitHub можно посмотреть во вкладке Files changed.
#
#   Где найти вкладку Files changed:
#
#   Откройте нужный Pull Request.
#
#   Наверху вы увидите вкладки:
#
#   Conversation – обсуждение и комментарии
#
#   Commits – список коммитов в PR
#
#   ✅ Files changed – все изменения в файлах
#
#   Нажмите на Files changed, чтобы увидеть:
#
#   какие строки были добавлены или удалены,
#
#   какие файлы затронуты,
#
#   inline-комментарии от других участников.
#
#
#
#   В какой вкладке находится страница обсуждений пул реквеста?
#
#   Где найти вкладку Conversation:
#
#   Откройте нужный Pull Request.
#
#   Наверху вы увидите вкладки:
#
#   ✅ Conversation – обсуждение изменений, комментарии, статус CI, автоматические ответы (ботов).
#
#   Commits – список коммитов.
#
#   Files changed – изменения в коде.
#
#   Именно во вкладке Conversation можно:
#
#   Читать и оставлять комментарии.
#
#   Видеть статус проверок (CI).
#
#   Отслеживать историю открытия, закрытия, ребейзов и т. д.
#
#   Создание запроса на слияние

# 4 Можно ли открыть пул реквест, если вы ничего не вносили в FORK?
#
#   Да, вы можете открыть пул-реквест (pull request) из своей форкнутой версии репозитория, даже если не внесли в неё никаких изменений. Однако в таком случае пул-реквест не будет содержать никаких изменений, и GitHub отобразит сообщение «There isn't anything to compare».
#
#   Чтобы создать пул-реквест, необходимо внести хотя бы одно изменение в ваш форк по сравнению с оригинальным репозиторием. Это может быть добавление, удаление или изменение файла, либо создание новой ветки с изменениями.
#
# 4.1 Что нужно сделать чтобы открыть пул реквест?
#
#   Шаг 1: Форк и клонирование репозитория
#
#   Сделайте форк репозитория, в который хотите внести изменения, нажав кнопку Fork на странице репозитория.
#
#   Клонируйте форкнутый репозиторий на свой компьютер: git clone https://github.com/ВАШ_ПОЛЬЗОВАТЕЛЬ/РЕПОЗИТОРИЙ.git
#
#   Шаг 2: Создание новой ветки и внесение изменений
#   Создайте новую ветку для ваших изменений: git checkout -b имя-ветки
#
#   Внесите необходимые изменения в код, документацию или другие файлы.
#
#   Добавьте и закоммитьте изменения
#
#   git add .
#   git commit -m "Краткое описание изменений"
#
#   Отправьте изменения в ваш форк на GitHub: git push origin имя-ветки
#
#
#   Шаг 3: Открытие пул-реквеста на GitHub
#
#   Перейдите на страницу вашего форка на GitHub.
#
#   Нажмите кнопку Compare & pull request, которая появится после пуша новой ветки.
#
#   Убедитесь, что:
#
#   Base repository — это оригинальный репозиторий, в который вы хотите внести изменения.
#
#   Base branch — ветка, в которую вы предлагаете внести изменения (обычно main или master).
#
#   Compare branch — ваша ветка с изменениями.
#
#   Добавьте заголовок и описание к вашему пул-реквесту, пояснив суть изменений.
#
#   Нажмите кнопку Create pull request для отправки запроса.
#
# 4.2 Что нужно сделать Если ваш Форк устарел?
#
#   Если ваш форк на GitHub устарел и вы хотите синхронизировать его с оригинальным репозиторием (upstream), вы можете сделать это несколькими способами: через веб-интерфейс GitHub, с помощью командной строки или через GitHub Desktop.
#
#   Способ 1: Обновление форка через веб-интерфейс GitHub
#
#   Это самый простой способ, не требующий использования командной строки:
#
#   Перейдите на страницу вашего форка на GitHub.
#
#   Нажмите на кнопку "Sync fork" (или "Fetch upstream").
#
#   В появившемся меню выберите "Update branch".
#
#   Если возникнут конфликты, GitHub предложит создать pull request для их разрешения
#
#   Способ 2: Обновление форка через командную строку
#
#   Для более точного контроля над процессом синхронизации:
#
#   Откройте терминал и перейдите в директорию вашего локального форка.
#
#   Добавьте оригинальный репозиторий как удалённый источник: git remote add upstream https://github.com/ОРИГИНАЛЬНЫЙ_ПОЛЬЗОВАТЕЛЬ/ОРИГИНАЛЬНЫЙ_РЕПОЗИТОРИЙ.git
#
#   Получите последние изменения из оригинального репозитория: git fetch upstream
#
#   Переключитесь на основную ветку вашего форка (обычно main или master): git checkout main
#
#   Слейте изменения из оригинального репозитория в ваш форк: git merge upstream/main
#
#   Отправьте обновления на ваш форк на GitHub: git push origin main
#
#
#   Способ 3: Обновление форка через GitHub Desktop
#
#   Если вы предпочитаете графический интерфейс:
#   GeeksforGeeks
#
#   Откройте GitHub Desktop и выберите ваш форк.
#
#   Перейдите в меню Repository > Repository Settings.
#
#   В разделе Remotes добавьте оригинальный репозиторий как upstream.
#
#   Нажмите Fetch origin, чтобы получить последние изменения.
#
#   Перейдите в меню Branch > Merge into current branch, чтобы слить изменения.
#
#   Нажмите Push origin, чтобы отправить обновления на GitHub.
#
#   Советы
#
#   Перед слиянием изменений убедитесь, что вы находитесь в правильной ветке.
#
#   Если в вашем форке есть уникальные изменения, будьте готовы разрешить возможные конфликты при слиянии.
#
#   Регулярное обновление форка помогает избежать проблем при создании pull request в оригинальный репозиторий.
#
#
#
#
# 4.3 Что нужно сделать если в пул реквесте имеются конфликты слияния
#
#   Способ 1: Разрешение конфликтов через веб-интерфейс GitHub
#
#   Этот метод подходит для простых конфликтов, таких как изменения в одних и тех же строках файлов.
#
#   Перейдите на страницу вашего пул-реквеста.
#
#   Найдите и нажмите кнопку "Разрешить конфликты" (Resolve conflicts).
#
#   В открывшемся редакторе вы увидите конфликтующие участки кода, отмеченные маркерами:
#
# <<<<<<< HEAD
# // Изменения из базовой ветки
# =======
# // Изменения из вашей ветки
# >>>>>>> feature-branch
#
#   Отредактируйте файл, выбрав необходимые изменения, и удалите маркеры конфликтов (<<<<<<<, =======, >>>>>>>).
#
#   После устранения всех конфликтов нажмите "Пометить как разрешённый" (Mark as resolved)
#
#   Затем нажмите "Зафиксировать слияние" (Commit merge), чтобы сохранить изменения
#
#   Способ 2: Разрешение конфликтов с помощью командной строки
#
#   Подходит для сложных конфликтов или если вы предпочитаете работать локально.
#
#   Откройте терминал и перейдите в директорию вашего локального репозитория:
#     cd путь/к/вашему/репозиторию
#
#   Убедитесь, что вы находитесь в ветке, связанной с пул-реквестом:git checkout ваша-ветка
#
#   Получите последние изменения из базовой ветки:git fetch origin
#
#   Попробуйте объединить базовую ветку с вашей: git merge origin/базовая-ветка
#
#   Откройте конфликтующие файлы в редакторе кода и вручную устраните конфликты, удалив маркеры и выбрав нужные изменения.
#
#   После разрешения конфликтов добавьте изменённые файлы: git add путь/к/файлу
#
#   Завершите слияние, создав коммит: git commit -m "Разрешены конфликты слияния"
#
#   Отправьте изменения в удалённый репозиторий: git push origin ваша-ветка
#
#   Полезные советы
#
#   Перед началом убедитесь, что у вас есть актуальная копия базовой ветки.
#
#   Если вы не уверены в выборе между изменениями, обратитесь к коллегам или владельцам репозитория.
#
#   Регулярно синхронизируйте вашу ветку с базовой, чтобы минимизировать вероятность конфликтов.
#
#

# 5 Что нужно сделать Для добавления отрывка кода в комментарии к issue
#
# #Вариант 1: Многострочный блок кода с подсветкой синтаксиса
#
# #Для оформления многострочного кода используйте тройные обратные кавычки (```) до и после блока кода. Это создаст отдельный блок с возможностью подсветки синтаксиса.
#
# ```python
#     def hello():
#         print()
# ```
#
# #Вариант 2: Ссылка на конкретный фрагмент кода из репозитория
#
# #Если вы хотите сослаться на определённые строки кода из репозитория, вы можете создать постоянную ссылку на них:
#
# #Перейдите к нужному файлу в репозитории на GitHub.
#
# #Нажмите на номер строки, чтобы выделить её. Для выбора диапазона строк удерживайте клавишу Shift и щёлкните по номеру последней строки.
#
# #Слева от выбранной строки или диапазона строк нажмите на значок с тремя точками и выберите "Copy permalink".
#
# #Вставьте эту ссылку в комментарий к issue.
#
# 5.1 На какую клавишу нажать клавишу чтобы выделенный текст был включён как цитата в ваш комментарий?
#
# #Метод 1: Быстрое цитирование выделенного текста
#
# #Выделите нужный текст в обсуждении или комментарии.
#
# #Нажмите клавишу R.
#
# #GitHub автоматически вставит выделенный текст в поле ответа, оформив его как цитату с символом >.
#
# #Метод 2: Использование клавиатурного сокращения для оформления цитаты
#
# #Если вы уже находитесь в поле ввода комментария и хотите оформить часть текста как цитату:
#
# #Выделите нужный текст.
#
# #Нажмите Ctrl + Shift + . (на Windows/Linux) или Cmd + Shift + . (на macOS).
#
# #Это сочетание клавиш автоматически добавит символ > перед каждой строкой выделенного текста, оформляя его как цитату.
#
# #Метод 3: Ручное добавление символа цитаты
#
# #Вы также можете вручную оформить цитату:
#
# #Добавьте символ > перед строкой текста, которую хотите цитировать.
# #> Это пример цитаты.
#
#
# 5.2 Как вставить картинку в ишьюс?
#
# #Способ 1: Перетаскивание изображения
#
# #Откройте нужный issue или создайте новый.
#
# #Перетащите изображение из проводника прямо в поле комментария.
#
# #GitHub автоматически загрузит изображение и вставит в комментарий соответствующую Markdown-ссылку.
#
# #Способ 2: Вставка из буфера обмена
#
# #Скопируйте изображение в буфер обмена (например, с помощью инструмента "Ножницы" или "Print Screen").
#
# #Кликните в поле комментария и нажмите Ctrl + V (или Cmd + V на macOS).
#
# #Изображение будет загружено, и в комментарии появится Markdown-ссылка на него.
#
# #Способ 3: Использование кнопки "Attach files"
#
# #В поле комментария нажмите на иконку скрепки или ссылку "selecting them".
#
# #Выберите изображение на вашем компьютере.
#
# #После загрузки GitHub вставит Markdown-ссылку на изображение в комментарий.
# #Ardalis
#
# #Способ 4: Вставка изображения по URL
#
# #Если изображение уже размещено в интернете, вы можете вставить его с помощью Markdown-синтаксиса: ![Описание изображения](https://example.com/image.png)
#
#
# #Поддержание GitHub репозитория в актуальном состоянии
#

# 6. Как понять что ваш форк устарел?
#
#   Проверка через веб-интерфейс GitHub
#
#   Перейдите на страницу вашего форка.
#
#   Если ваш форк отстает от оригинального репозитория, GitHub отобразит уведомление, например:
#   Git
#
#   "This branch is X commits behind [оригинальный репозиторий]:main."
#
#   Это означает, что в оригинальном репозитории появились новые коммиты, которых нет в вашем форке.
#
#   Сравнение коммитов через вкладку "Compare"
#
#   На странице вашего форка нажмите кнопку "Compare".
#
#   В выпадающем списке "base fork" выберите ваш форк и ветку (например, main).
#
#   В выпадающем списке "head fork" выберите оригинальный репозиторий и его ветку.
#
#   GitHub отобразит разницу между ветками. Если есть новые коммиты в оригинальном репозитории, они будут показаны
#
#   Проверка через командную строку
#
#   Если вы предпочитаете использовать командную строку:
#
#   Откройте терминал и перейдите в директорию вашего локального форка.
#
#   Добавьте оригинальный репозиторий как удаленный источник: git remote add upstream https://github.com/ОРИГИНАЛЬНЫЙ_ПОЛЬЗОВАТЕЛЬ/ОРИГИНАЛЬНЫЙ_РЕПОЗИТОРИЙ.git
#
#   Получите данные из оригинального репозитория: git fetch upstream
#
#   Сравните вашу ветку с оригинальной: git log HEAD..upstream/main --oneline - Если команда выводит список коммитов, это означает, что ваш форк отстает от оригинального репозитория.
#
#   Обновление форка
#
#   Если вы обнаружили, что ваш форк устарел, вы можете его обновить:
#
#   В веб-интерфейсе GitHub:
#
#   Перейдите на страницу вашего форка.
#
#   Нажмите кнопку "Sync fork" (или "Обновить ветку").
#
#   Подтвердите синхронизацию
#
#   Через командную строку:
#   git checkout main
#   git fetch upstream
#   git merge upstream/main
#   git push origin main
#
#
# 6.1 Как обновить форк?
#
#   Метод 1: Обновление через веб-интерфейс GitHub
#
#   Перейдите на страницу вашего форка на GitHub.
#
#   Если ваш форк отстает от оригинального репозитория, GitHub отобразит уведомление, например:
#
#   "This branch is X commits behind [оригинальный репозиторий]:main."
#
#   Нажмите кнопку "Fetch upstream" (или "Обновить ветку").
#
#   Подтвердите синхронизацию, нажав "Fetch and merge".
#
#   Этот метод удобен для быстрого обновления форка без использования командной строки.
#
#
#   Метод 2: Обновление через командную строку Git
#
#   Если вы предпочитаете использовать командную строку, выполните следующие шаги:
#
#   Откройте терминал и перейдите в директорию вашего локального форка.
#
#   Добавьте оригинальный репозиторий как удаленный источник (если ещё не добавлен): git remote add upstream https://github.com/ОРИГИНАЛЬНЫЙ_ПОЛЬЗОВАТЕЛЬ/ОРИГИНАЛЬНЫЙ_РЕПОЗИТОРИЙ.git
#
#   Получите данные из оригинального репозитория: git fetch upstream
#
#   Переключитесь на вашу основную ветку (например, main): git checkout main
#
#   Обновите вашу ветку, сливая изменения из оригинального репозитория: git merge upstream/main
#
#   Отправьте обновления в ваш форк на GitHub: git push origin main
#
#   Метод 3: Использование GitHub CLI
#
#   Если у вас установлен GitHub CLI, вы можете обновить форк с помощью одной команды: gh repo sync --branch main
#
#   Эта команда синхронизирует вашу ветку main с оригинальным репозиторием. Если возникают конфликты, вы можете использовать флаг --force для принудительной синхронизации:
#
#   gh repo sync --branch main --force
#

# 7 Как добавить участников в ваш репозиторий, чтобы команда могла работать над одним репозиторием?
#
#   Добавление участников в личный репозиторий
#
#   Если репозиторий находится в вашей личной учетной записи:
#
#   Перейдите на главную страницу вашего репозитория на GitHub.
#
#   Нажмите на вкладку Settings (Настройки).
#
#   В боковом меню выберите Collaborators (Сотрудники).
#
#   Нажмите кнопку Add people (Добавить людей).
#
#   Введите имя пользователя GitHub человека, которого хотите пригласить, и выберите его из списка.
#
#   Нажмите Add [имя пользователя] to this repository (Добавить [имя пользователя] в этот репозиторий).
#
#   Добавление участников в репозиторий организации
#
#   Если репозиторий принадлежит организации:
#
#   Перейдите на страницу репозитория в вашей организации.
#
#   Нажмите на вкладку Settings (Настройки).
#
#   В боковом меню выберите Manage access (Управление доступом).
#
#   Нажмите кнопку Invite a collaborator (Пригласить соавтора).
#
#   Введите имя пользователя GitHub человека, которого хотите пригласить, и выберите его из списка.
#
#   Выберите уровень доступа (например, Read, Write, Admin).
#
#   Нажмите Add [имя пользователя] to this repository (Добавить [имя пользователя] в этот репозиторий)
#
#   Упоминания и уведомления

# 8. Какой символ нужен для упоминания кого-либо?
#   На GitHub для упоминания пользователя или команды используется символ @. Просто введите @ перед именем пользователя или команды, например: @username
#
# 8.1. Где находится Центр уведомлений, напишите ссылку ?
#   https://github.com/notifications
#

# 9. Что такое и зачем нужен файл README - Файл README (от англ. "read me" — «прочти меня») — это текстовый документ, который обычно размещается в корневой директории проекта на GitHub. Он служит основным источником информации о проекте для пользователей и разработчиков.
#
#   Назначение файла README
#
#   Файл README выполняет следующие функции:
#
#   Описание проекта: предоставляет общее представление о проекте, его целях и функциональности.
#
#   Инструкции по установке и использованию: объясняет, как установить и использовать проект.
#
#   Информация о лицензии: уточняет условия использования и распространения проекта.
#
#   Контактные данные: предоставляет способы связи с авторами или поддержкой проекта.
#
#   На GitHub, если в репозитории присутствует файл README, его содержимое автоматически отображается на главной странице репозитория, что делает его первым источником информации для посетителей.
#
#   Пример структуры README
#
#   Вот пример того, как может быть структурирован файл README:
#
#
#   Название проекта
#
#   Краткое описание проекта и его назначения.
#
#   Начало работы
#
#   Инструкции по установке и запуску проекта.
#
#   Использование
#
#   Примеры использования и основные функции.
#
#   Вклад
#
#   Информация о том, как внести вклад в развитие проекта.
#
#   Лицензия
#
#   Условия лицензирования проекта.
#
#
# 9.1 Что такое и зачем нужен файл CONTRIBUTING ?
#
#   Файл CONTRIBUTING.md в репозитории GitHub содержит рекомендации для участников проекта о том, как правильно вносить свой вклад. Он помогает установить четкие правила взаимодействия, облегчает процесс участия и способствует эффективному сотрудничеству между разработчиками.
#
#   Зачем нужен CONTRIBUTING.md
#
#   Для владельцев репозитория: позволяет заранее определить, каким образом участники могут вносить изменения, оформлять баг-репорты и предлагать улучшения.
#
#   Для участников: предоставляет четкие инструкции, что повышает вероятность принятия их изменений и снижает количество ошибок при оформлении пул-реквестов и задач.
#
#   Для проекта в целом: способствует формированию организованного и дружелюбного сообщества, снижает нагрузку на мейнтейнеров и повышает качество получаемых вкладов.
#
#   GitHub автоматически отображает ссылку на CONTRIBUTING.md при создании нового issue или pull request, а также на вкладке Contribute репозитория
#
#   Что обычно включают в CONTRIBUTING.md
#
#   Содержимое файла может варьироваться в зависимости от проекта, но часто включает:
#
#   Приветствие и благодарность за интерес к проекту.
#
#   Требования к оформлению кода (например, стиль, форматирование, линтинг).
#
#   Инструкции по созданию баг-репортов и предложений.
#
#   Процесс создания и отправки pull request'ов.
#
#   Информация о тестировании и запуске проекта локально.
#
#   Ссылки на дополнительные документы: README.md, LICENSE, CODE_OF_CONDUCT.md
#
#
#   Где разместить файл
#
#   GitHub поддерживает размещение CONTRIBUTING.md в следующих местах:
#
#   Корневая директория репозитория.
#
#   Папка .github/.
#
#   Папка docs/.
#
#   Если файл присутствует в нескольких местах, GitHub приоритетно использует версию из .github/, затем из корня, и только потом из docs/.
#
#   Преимущества использования CONTRIBUTING.md
#
#   Повышает качество и релевантность получаемых вкладов.
#
#   Сокращает количество вопросов от новых участников.
#
#   Упрощает процесс ревью и слияния изменений.
#
#   Способствует росту и развитию сообщества проекта.
#
#   Управление проектом

# 10 Как измененить основную ветку
#
#   Требования
#
#   У вас должны быть административные права на репозиторий.
#
#   В репозитории должно быть не менее двух веток.
#
#
#   Изменение основной ветки
#
#   Перейдите на главную страницу вашего репозитория на GitHub.
#
#   Нажмите на вкладку Settings (Настройки).
#
#   В разделе "Default branch" (Ветка по умолчанию) нажмите кнопку Edit (Изменить) рядом с текущим именем ветки.
#
#   В появившемся выпадающем списке выберите новую ветку, которую вы хотите установить в качестве основной.
#
#   Нажмите Update (Обновить).
#
#   Прочитайте предупреждение о возможных последствиях изменения основной ветки и подтвердите действие, нажав I understand, update the default branch (Я понимаю, обновить ветку по умолчанию)
#
#   После этого новая ветка станет основной, и все новые пул-реквесты и клоны репозитория будут ориентироваться на неё.
#
# 10.1 Как передать проект? какая кнопка?
#
#   Как передать репозиторий на GitHub
#
#   Перейдите на главную страницу вашего репозитория на GitHub.
#
#   Нажмите на вкладку Settings (Настройки).
#
#   Прокрутите страницу вниз до раздела Danger Zone (Опасная зона).
#
#   Нажмите кнопку Transfer (Передать).
#
#   В появившемся окне введите имя пользователя или организации, которым вы хотите передать репозиторий.
#
#   Подтвердите название репозитория для подтверждения действия.
#
#   Нажмите I understand, transfer this repository (Я понимаю, передать этот репозиторий).
#
#
#   Важные замечания
#
#   Вы должны иметь административные права на репозиторий.
#
#   Новый владелец (пользователь или организация) не должен иметь репозиторий с таким же именем.
#
#   При передаче репозитория все его issues, pull requests, вики, звёзды и наблюдатели также будут переданы.
#
#   Если репозиторий является форком, он останется связанным с исходным репозиторием.
#
#   Все существующие ссылки на старое расположение репозитория будут автоматически перенаправлены на новое
#
#
# 10.2 Что такое файл .gitignore?
#
#   Файл .gitignore — это текстовый файл, используемый в системе контроля версий Git для указания файлов и каталогов, которые должны быть проигнорированы Git при отслеживании изменений. Он помогает исключить из репозитория временные, сгенерированные или конфиденциальные файлы, которые не должны быть частью проекта
#
#   Синтаксис и примеры
#
#   Файл .gitignore состоит из шаблонов, определяющих, какие файлы или каталоги игнорировать. Примеры:
#
#
#   Игнорировать все файлы с расширением .log
#
#   *.log
#
#   Игнорировать каталог node_modules
#
#   /node_modules/
#
#   Игнорировать все файлы .env, кроме .env.example
#   .env
#
#     # # # # # # # # # !.env.example
#
#   В этом примере:
#
#   *.log — игнорирует все файлы с расширением .log.
#
#   /node_modules/ — игнорирует каталог node_modules в корне проекта.
#
#   .env — игнорирует файл .env.
#
#     # # # # # # # # # !.env.example — исключает файл .env.example из игнорирования, даже если он соответствует предыдущим шаблонам.
#   umnoprovse.ru
#
#   Шаблоны могут использовать подстановочные знаки:
#   Заметки разработчика+1umnoprovse.ru+1
#
#   * — соответствует любому количеству символов.
#
#   ? — соответствует одному символу.
#
#   [abc] — соответствует одному символу из набора
#
#
