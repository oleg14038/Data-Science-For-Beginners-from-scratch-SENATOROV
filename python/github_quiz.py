"""Github quiz."""

# 1.1. Что такое GitHub? 
#
#     GitHub — это платформа для хостинга и управления репозиториями Git. Она предоставляет возможности для совместной работы, контроля версий, отслеживания изменений и создания Pull Request'ов.

# 1.2. Как GitHub связан с Git? 
#
#     GitHub использует Git — распределённую систему контроля версий. GitHub предоставляет удалённый хостинг для репозиториев, созданных с использованием Git, и инструменты для совместной работы, такие как Pull Request'ы, issues и wiki.

# 1.3. Чем отличается fork репозитория от его клонирования (clone)?
#
#     Fork — это создание копии репозитория на своем аккаунте на GitHub. Это позволяет работать с репозиторием без воздействия на оригинальный.
#
#     Clone — это создание локальной копии репозитория на вашем компьютере для работы с ним в Git.

# 1.4. Зачем нужны и как работают pull requests? 
#
#     Request (PR) — это запрос на слияние изменений из одной ветки в другую. Это позволяет предложить изменения в репозиторий и дать возможность другим участникам проекта обсудить и просмотреть эти изменения перед слиянием.

# 1.5. GitHub использует ваш почтовый адрес для привязки ваших Git коммитов к вашей учётной записи?
#
#     GitHub использует почтовый адрес, указанный в конфигурации Git, для связывания ваших коммитов с вашим профилем на GitHub. Это позволяет показывать авторство коммитов в интерфейсе GitHub

# 1.6. Какая команда генерирует SSH ключ для доступа по SSH к репозиторию?
#
#     ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
#

# Внесение собственного вклада в проекты

# 2.
#     https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/issues/247
#
#     2.1 https://github.com/oleg14038/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/Oleg14038
#
#     2.2 https://github.com/oleg14038/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/dev
#     
#     2.3 done
#
#     2.4 https://github.com/oleg14038/Data-Science-For-Beginners-from-scratch-SENATOROV/pull/1
#
#     2.5 https://github.com/oleg14038/Data-Science-For-Beginners-from-scratch-SENATOROV/pull/1/files/397422b73cbd67388207a7c2a734ecb185afb20b#diff-5e25151a4a482c3c4676216ece50a70a51f8d4b2adb42e04a2322b9c2586bd24
#
#    2.6 https://github.com/oleg14038/Data-Science-For-Beginners-from-scratch-SENATOROV/pulls?q=is%3Apr+is%3Aclosed

# 2.8 Как посмотреть какие файлы были в репозитории на момент определенного коммита? вставьте сюда ссылку на любой коммит, где взять ссылку? подсказка
#
#
# Перейдите в репозиторий на GitHub (например, https://github.com/torvalds/linux).
#
# Нажмите на вкладку "Commits" — она обычно находится рядом с надписью "X commits":
#
#     Пример: https://github.com/torvalds/linux/commits/master
#
# Выберите нужный коммит и нажмите на его хеш (обычно первые 7 символов) или на заголовок коммита.
#                                            

# 2.9 как открыть запрос слияния, указывающий на другой запрос слияния и зачем это нужно?
#
# Открыть запрос слияния (pull request), который указывает на другой запрос слияния, означает создать PR, который зависит от другого PR — например, когда новая фича или исправление основываются на незавершённой работе из другого PR.
#
# Зачем это нужно?
#
#     Чтобы разделить большой PR на более мелкие, удобные для ревью.
#
#     Чтобы работать параллельно над несколькими частями одной задачи, где один PR не может быть принят без другого.
#
#     Чтобы показать последовательность изменений, а не всё сразу.

# Рабочий процесс с использованием GitHub

# 3 Напишите 8 пунктов, которые нужно сделать, чтобы внести вклад в чужой проект.
#
#     Найти подходящий проект
#     Найдите репозиторий, в который вы хотите внести вклад — например, на GitHub через теги good first issue, help wanted и т. д.
#
#
#     Форкнуть репозиторий
#     Нажмите кнопку Fork на GitHub, чтобы создать свою копию проекта в своем аккаунте.
#
#
#     Клонировать форк себе на компьютер git clone https://github.com/ваше_имя/проект.git
#
#
#     Создать новую ветку для изменений git checkout -b имя-ветки
#
#     Внести изменения и закоммитить
#     Отредактируйте файлы, а затем:
#     
#     git add .
#     git commit -m "Краткое описание изменений"
#
#     Отправить ветку в свой форк - git push origin имя-ветки
#
#     Открыть Pull Request (запрос на слияние)
#     Перейдите на GitHub и нажмите "Compare & pull request". Опишите, что вы изменили и зачем.
#
#     
#     Обсудить изменения с мейнтейнерами
#     Ответьте на замечания, при необходимости внесите правки. После одобрения ваш вклад может быть принят в основной проект.
#

# 3.1  Упомянуть номер issue в описании PR
#
#     Укажите ссылку на issue в теле PR с ключевыми словами, например: Fixes #42,Closes #101, Resolves #7
#
#     Использовать точную формулировку
#
#     Поддерживаются только строго определённые ключевые слова, например:
#
#     Fixes #<номер>
#
#     Closes #<номер>
#
#     Resolves #<номер>
#
#
#      Размещать ссылку в теле PR, а не в заголовке
#
#     GitHub автоматически обрабатывает только ссылки из описания PR, а не из названия.
#
#     Использовать одну строку на каждый issue (если их несколько) - Fixes #10, Fixes #12, Resolves #15
#
#
#     Писать осмысленное описание PR
#
#     Объясните, что именно сделано и почему, особенно если PR закрывает issue — это упрощает ревью
#
#     
#     
#     Связывать только реально решаемые issue
#
#     Не стоит указывать Fixes #X, если PR не решает issue полностью — лучше использовать See #X или Related to #X.
#
#
#     Проверить, что ветка PR нацелена на правильную базовую ветку
#
#     Например, main, develop или release, в зависимости от политики проекта.
#

# Какие практики принято соблюдать при создании commit чтобы закрыть автоматический issues? 
#
#     Fixes #номер
#     Closes #номер
#     Resolves #номер
#
# Исправлена ошибка с путём к файлу. Fixes #42
#
#     Убедиться, что коммит будет включён в Pull Request в main/default ветку -GitHub не закроет issue, если коммит не попадёт в основную ветку через слияние Pull Request. Просто наличие коммита в другой ветке не работает
#
# Размещать ключевое слово в теле коммита (а не только в заголовке) - 
#     
#     feat: добавлена проверка на пустую строку
#
#     Fixes #123
#  
# Можно закрыть несколько issues сразу
#
#     Fixes #10  
#     Closes #11  
#     Resolves #12
#
# Не использовать сокращённые или неточные слова
#
#     Fix #123     ❌ (не сработает)
#     Fixed 123    ❌ (не сработает)
#     Closes issue #123 ❌ (не сработает)
#     
# Проверять, что issue действительно решён
#
# Если коммит не закрывает issue полностью, используйте
#
#     Related to #123
#     See #123
#     Partial fix for #123
#
# Соблюдать стиль коммитов проекта (если есть)
#
# Многие проекты используют шаблоны типа Conventional Commits:
#
#     fix(login): добавлена проверка на пустой email
#
#     Fixes #101
#
#  Оформлять коммиты чисто и понятно
#
# Коммиты должны быть атомарными, логичными, с понятным сообщением — это упрощает ревью и делает историю проекта читаемой.
#
#
#
#

# 3.2 Как отклонить/закрыть пул реквест? (предоставьте скриншот где это в гитхабе)
#
# Чтобы отклонить или закрыть Pull Request (PR) на GitHub, выполните следующие шаги:
#
# Как закрыть Pull Request через веб-интерфейс GitHub
#
#     Перейдите в репозиторий, где находится PR.
#
#     Нажмите на вкладку "Pull requests".
#
#     Выберите нужный PR из списка.
#
#     Прокрутите страницу вниз до нижней части обсуждения PR.
#
#     Нажмите кнопку "Close pull request".
#
#     При необходимости добавьте комментарий с объяснением причины закрытия.
#
# Когда стоит закрывать PR
#
#     Изменения в PR больше не актуальны.
#
#     Проблема решена другим способом.
#
#     PR содержит ошибки или не соответствует требованиям проекта.
#
#     Автор PR неактивен, и продолжение работы невозможно.
#
# Дополнительные советы
#
#     Если вы хотите отклонить только рецензию, а не весь PR, используйте опцию "Dismiss review" рядом с обзором изменений.
#
#     После закрытия PR вы можете удалить связанную ветку, чтобы поддерживать порядок в репозитории.
#
#     Если PR был закрыт по ошибке, его можно восстановить, нажав "Reopen pull request".

# ![ЗАКРЫТИЕ PR](C:\Users\adm\Documents\GitHub\Data-Science-For-Beginners-from-scratch-SENATOROV\python\ЗАКРЫТИЕ_PR.png)

# Перед отправкой пул реквеста нужно ли создавать ишьюс?
#
#     Создавать issue перед отправкой Pull Request (PR) — не обязательно, но в некоторых случаях это рекомендуется. Вот как это зависит от ситуации:
#
# Когда нужно или желательно создавать issue:
#
#     В проекте так принято
#     Некоторые проекты требуют, чтобы каждый PR ссылался на соответствующий issue — это помогает отслеживать задачи.
#
#     Изменение связано с багом или новой фичей
#     Лучше сначала описать проблему в issue, получить подтверждение от мейнтейнеров, а уже потом делать PR.
#
#         Это экономит время: вдруг PR не нужен или делается в неправильном направлении.
#
#     Вы не уверены, нужно ли это изменение
#     Создайте issue, опишите, что хотите изменить, и дождитесь обратной связи.
#
#
# Когда можно не создавать issue:
#
#     Мелкие правки — например, опечатки, незначительный рефакторинг, исправление ссылки.
#
#     Проект разрешает PR без issue — это часто указывается в CONTRIBUTING.md.
#
#     Вы уже обсудили изменение в другом месте — например, в комментариях к другому PR или в чате команды.
#
# Как объединить issue и PR
#
#     В описании PR используйте: Fixes #номер
#

# В какой вкладке можно посмотреть список изменений который был в пул реквесте?
#
#     Список изменений в Pull Request на GitHub можно посмотреть во вкладке Files changed.
#
# Где найти вкладку Files changed:
#
#     Откройте нужный Pull Request.
#
#     Наверху вы увидите вкладки:
#
#         Conversation – обсуждение и комментарии
#
#         Commits – список коммитов в PR
#
#         ✅ Files changed – все изменения в файлах
#
# Нажмите на Files changed, чтобы увидеть:
#
#         какие строки были добавлены или удалены,
#
#         какие файлы затронуты,
#
#         inline-комментарии от других участников.
#
#

# В какой вкладке находится страница обсуждений пул реквеста?
#
# Где найти вкладку Conversation:
#
#     Откройте нужный Pull Request.
#
# Наверху вы увидите вкладки:
#
#         ✅ Conversation – обсуждение изменений, комментарии, статус CI, автоматические ответы (ботов).
#
#         Commits – список коммитов.
#
#         Files changed – изменения в коде.
#
# Именно во вкладке Conversation можно:
#
#         Читать и оставлять комментарии.
#
#         Видеть статус проверок (CI).
#
#         Отслеживать историю открытия, закрытия, ребейзов и т. д.
