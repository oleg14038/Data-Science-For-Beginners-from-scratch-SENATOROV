# 4.6. Операторы 1
#
# 4.6.1 . Арифмети ческие операторы
# Оператор Операция
# + Сложение
#
# - Вычитание
#
# * Умножение
#
# / Деление
#
# % Остаток от деления
#
# // Целочисленное деление
#
# ** Возведение в степень

# ♦ + (плюс)
# Складывает два объекта.
# • 4 + 3 дает 7.
# • , а , + , Ь , дает ' аЬ ' .
#
# ♦ - (минус)
# Выполняет вычитание одного числа из другого. Если первый операнд отсутст
# вует, предполагается, что он равен нулю.
# • -2 . в дает отрицательное число.
# • 70 - 34 дает 36.
#
# ♦ * (умножение)
# Возвращает произведение двух чисел или повторяет строку заданное число раз.
# • 2 * 3 дает 6.
# • 'ля ' * 3 дает ' ляляля ' .
#
# ♦ ** (степень)
# • х ** у возвращает х в степени у.
# • 2 ** 3 возвращает в.
# ♦ / (деление)
# • х / у делит число х на число у.
# • 13 / 3 дает 4 , 333333333333333
#
# // (целочисленное деление)
# х / / у делит х на у и округляет ответ до ближайшего целого числа. При этом,
# если одно из чисел является дробным, ответ тоже будет числом с плавающей
# точкой.
# • 1 з / / з дает 4 .
# • - 1 з // з дает -5.
# • 9 // 1 . в1 дает 4 . О.
#
# ♦ % (остаток от деления)
# Возвращает остаток от деления.
# • 1 3 % з дает 1 .
# • -25 . 5 % 2 . 25 дает 1 . 5

# 4.6.3. Операторы сравнения
# Оператор Операция
# - Равенство
# !=  Неравенство
#
# > Больше
#
# < Меньше
#
# >= Больше или равно
#
# <= Меньше или равно

# ♦ == (равно)
# Проверяет равенство объектов. Например:
# • х = 2; у = 2 ; х == у возвращает True.
#
# • х = ' str ' ; у = ' stR ' ; х == у возвращает False.
#
# • х = ' str ' ; у = ' str ' ; х == у возвращает True.

# ♦ ! = (не равно)
# Проверяет неравенство объектов. Например:
# х = 2; у = 3; х ! = у возвращает True

# ♦ < (меньше)
# х < у проверяет, действительно ли х меньше у. Как и все прочие операторы срав
# нения, возвращает True или False.
# 6 < 4 дает False, а 4 < 6 дает True.
#
# Сравнения можно соединять в цепочки: например, 3 < 5 < 7 дает тrue

# ♦ > (больше)
# х > у проверяет, действительно ли х больше у.
# 6 > 4 возвращает True. Если оба операнда являются числами, они сначала приво
# дятся к общему типу. В противном случае всегда возвращает False

# ♦ <= (меньше или равно)
# х <= у проверяет, действительно ли х меньше или равно у.
# х = 3; у = 6; х <= у возвращает True

# ♦ >= (больше или равно)
#
# х >= у проверяет, действительно ли х больше или равно у.
#
# х = 4 ; у = 3 ; х > = 3 возвращает True

# 4.6.4. Логи ческие операторы

# ♦ not (логическое НЕ)
#
# • Если х равен True, возвращает False.
#
# • Если х равен False, возвращает тrue.
#
# ♦ and (логическое И)
#
# • х and у возвращают значение False, если х равно False, в противном случае
# возвращается значение у.
#
# • Пусть х = False ; у = True. Тогда х and у возвращают False, поскольку х имеет
# значение False. В этом случае Python не будет вычислять значение у, по
# скольку знает, что левая часть выражения and имеет значение False, и поэтому
# все выражение будет равно False независимо от других значений. Эrо назы
# вается сокращенной оценкой логического выражения

# or (логическое ИЛИ)
#
# • Если х равен тrue, возвращает True, иначе возвращает оценку у.
#
# • Пусть х = тrue; у = False. Тогда х or у возвращает True. Здесь также может
# выполняться сокращенная оценка.

# 4.6.5. Операторы идентификации и вхождения

# Оператор Выражение
# Операторы идентификации
#
# is       х is у
#
# is      not х is not у
#
# Операторы вхождения
#
# in         х in у
#
# not in     х not in у

# +
z_num = [1, 2, 3]
b_number = z_num  # b ссылается на тот же объект, что и a

print(
    z_num is b_number
)  # True, так как обе переменные ссылаются на один и тот же объект
# -

# ♦ Операторы идентификации проверяют идентичность двух объектов.
# • is
#
# Если если х - это тот же объект, что и у,
#
# выражение возвращает True. В противном
# случае возвращается False

# • is not
#
#
#
# Если х не является тем же объектом, что и у,
#
# выражение возвращает True.
#
# В противном случае возвращается False.

# Операторы вхождении проверяют, является ли данный объект элементом дан
# ной коллекции.
#
# Под «коллекцией» понимается последовательность или структу
# ра данных, например строка, список, кортеж и т. д.

# • in
# Если х является элементом коллекции у, то возвращается тrue, в противном
# случае возвращается False.
#
# • not in
# Если х не является элементом коллекции у, возвращается True, в противном
# случае возвращается False.

# +
# Строка
word = "hello"

print("h" in word)  # True, так как "h" есть в строке
# -

# 4.9. Порядок выполнения
# Порядок вычисления в математическом уравнении вам наверняка известен со шко
# лы: сначала скобки, затем степень, деление, умножение, сложение и вычитание, в
# порядке слева направо.

# Операторы выражений в круглых скобках: ()
# Используются для группировки операций и повышения приоритета.

# Оператор возведения в степень: **
# Выполняется справа налево.
#
# 2 ** 3 ** 2  # 2 ** (3 ** 2) = 512

# Унарные операторы: +, -, ~
# Применяются к одному операнду.
#
# -5  # Отрицательное значение

# Операторы умножения, деления, деления с округлением, остатка:
#
# *, /, //, %
#
# 10 * 2  # Умножение
#
# 10 / 3  # Обычное деление
#
# 10 // 3  # Целочисленное деление
#
# 10 % 3  # Остаток от деления

# Операторы сложения и вычитания: +, -
#
# 5 + 3  # Сложение
#
# 5 - 3  # Вычитание

# Операторы сдвига: <<, >>
#
# 1 << 2  # Сдвиг влево на 2 бита
#
# 8 >> 2  # Сдвиг вправо на 2 бита

# Операторы побитового "И": &
#
# 5 & 3  # Побитовое "И"

# Операторы побитового
#
# "Исключающего ИЛИ" (XOR) и побитового "ИЛИ": ^, |
#
# 5 ^ 3  # Побитовое исключающее "ИЛИ"
#
# 5 | 3  # Побитовое "ИЛИ"

# Операторы сравнений: ==,
# !=,
#
# >,
#
# >=,
#
# <,
#
# <=,
#
# is,
#
# is not,
#
# in,
#
# not in
#
# 5 == 5  # Равно
#
# 5 != 3  # Не равно
#
# 5 > 3   # Больше

# Оператор логического "НЕ": not
#
# not True  # Логическое отрицание

# Оператор логического "И": and
#
# True and False  # Логическое "И"

# Оператор логического "ИЛИ": or
#
# True or False  # Логическое "ИЛИ"

# Оператор присваивания: =, а также присваивание с операцией: +=, -=, *=, /=, //=, %=, **=, &=, |=, ^=, >>=, <<=
#
# x = 5  # Присваивание
#
# x += 2  # Сложение с присваиванием

# Оператор условного выражения: if ... else
#
# x = 5 if condition else 10  # Условное выражение

# Операторы лямбда-выражений: lambda
#
# f = lambda x: x + 2  # Лямбда-функция

# Операторы с более высоким приоритетом выполняются раньше.
#
# Круглые скобки позволяют явно управлять порядком операций.

# 4.9.2. Ассоциативность
#
# Операторы с одинаковым приоритетом вычисляются слева направо. Например, запись
#
# 2 + 3 + 4 эквивалентна ( 2 + 3 ) + 4 . Исключение составляет только оператор
#
# возведения в степень ** - он имеет ассоциативность справа налево.

# 4.9.3. Площадь прямоугольника

Length = 5
Width = 8
Area = Length * Width
print("Area of the Rectangle is", Area)
print(" Perimeter of the rectangle is", 2 * (Length + Width))

# 4. 1 О. Дина м и ческая тип изация
#
# В Python значение, на которое указывает переменная, имеет определенный тип
#
# данных, но сама переменная не имеет строгого типа. Вы можете повторно исполь
#
# зовать одну и ту же переменную, передавая ей ссьmку на объект уже другого типа.
#
# Переменные можно считать «ярлыками», связанными с объектами.
#
# six = 6
# six
#
# six = ' six '
#
# six

# 4.1 2. Логи ческая и физическая строка
#
# Физическая строка кода - это то, что вы буквально видите на экране, когда пише
# те программу.
#
# Логическая строка - это то, что Python считает единым выпол
# няемым выражением.
#
# Python неявно предполагает, что каждая физическая строка
# соответствует логической строке.

# эдесь две физические и две логические строки
i_number = 5
print(i_number)

# Здесь оператор i = 5 - это и физическая, и логическая строка. И функция
# print (i) - это тоже и физическая, и логическая строка.

# эдесь одна физическая строка, но две логические
i_one = 5
print(i_one)

# Python видит здесь две разные строки (логические строки), а вы, как программист,видите одну физическую строку.
#
# И зачем нам это?
#
# Если вы хотите записать более одной логической строки на одной физической
# строке, вы должны использовать точку с запятой (; ), которая отмечает конец логи
# ческой строки/оператора.
