"""Task commits."""

# 1. Опишите своими словами назначение каждого из этих типов коммитов:
#
# feat - feat - при этом коммите разробочик сообщает что добовляеет новый функционал  (изменения стиля)
#
# fix - при обнуружение ошибки кода разрабочик исправляет ошибку и в  коммите это указывает  что он исправил
#
# docs  — указывает, что изменение связано с документацией (README, комментарии и т. д.).
#
# style – при  изменениния или  форматирования кода и приведение кода к стилю PEP8 и линторам  (пробелы, запятые, отступы), не влияющие на работу кода.
#
#
# refactor – улучшение структуры кода без изменения поведения.
# Когда использовать refactor?
#
# test - добавляет тесты или исправляет существующие
#
# build – изменения, связанные со сборкой проекта (например, зависимости)
#
# ci – изменения в настройках CI/CD (например, конфигурация GitHub Actions).
#
# perf – оптимизация кода для повышения производительности.
#
# chore – технические изменения, не влияющие на код (обновление конфигураций, линтеров).
#

# 2. Пример фиктивного коммита с использованием типа fix для исправления бага в функции округления чисел:
#
# git commit -m "fix: -  исправлено округление чисел для корректного результата"
#
# Это сообщение соответствует стандарту Conventional Commits и четко описывает исправление бага, связанного с некорректным округлением чисел.
#
#

# 3. Добавление новой функциональности:
# Допустим, вы реализовали новую функцию generateReport в проекте. Сделайте фиктивный коммит с типом feat, отражающий добавление этой функциональности
#
# Пример фиктивного коммита с использованием типа feat для добавления новой функции generateReport:
#
# git commit -m "feat: добавлена функция generateReport для создания отчетов"
#

# 4 Модификация формата кода или стилей:
# Представьте, что вы поправили отступы и форматирование во всём проекте, не меняя логики кода. Сделайте фиктивный коммит с типом style
#
# Этот коммит отражает изменения, связанные с форматированием кода, без изменения его логики, что соответствует стандарту Conventional Commits.
#
# git commit -m "style: fix indentation and formatting"
#
#

# 5 Документация :
#
# Сделайте фиктивный коммит с типом docs, добавляющий или улучшающий документацию для вашей новой функции.
# Сделайте фиктивный коммит с типом test, добавляющий тесты для этой же функции.
#
# Примеры фиктивных коммитов:
#
#     Документация (docs):git commit -m "docs: добавлена документация для функции generateReport"
#
#
#
#

# 6. Тестирование (test):
#
# git commit -m "est: дtобавлены тесты для функции generateReport"

#
