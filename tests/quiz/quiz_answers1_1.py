# 15 В каком формате ipynb отправляется в гитхаб? причём здесь JSON?

# Файл .ipynb (Jupyter Notebook) отправляется в GitHub в виде обычного
# текстового файла в формате JSON.

# Почему .ipynb – это JSON?

# Jupyter Notebook хранит всю информацию (код, текст, изображения,
# вывод ячеек) в JSON-формате. Это позволяет:

#    Структурированно хранить ячейки и их результаты.

#    Легко читать и изменять содержимое файла программно.

#    Обрабатывать файлы с помощью скриптов (jq, Python и т. д.).

# Как выглядит .ipynb внутри?

# Пример структуры файла .ipynb:
# {
#    {
#      "cell_type": "code",
#      "execution_count": 1,
#      "metadata": {},
#     "outputs": [
#        {
#          "name": "stdout",
#          "output_type": "stream",
#          "text": ["Hello, world!\n"]
#        }
#      ],
#      "source": ["print('Hello, world!')"]
#    }
#  ],
#  "metadata": {},
#  "nbformat": 4,
#  "nbformat_minor": 4
# }
#
#
# Как GitHub отображает .ipynb?

#   GitHub рендерит Jupyter Notebook прямо в браузере.

#   Можно посмотреть код, результаты и графики без скачивания.

#   При просмотре git diff будут видны изменения в JSON, что иногда неудобно.
#
#
# Как GitHub отображает .ipynb?

#   Очистка вывода перед коммитом (jupyter nbconvert --clear-output).

#   Использование nbstripout – автоматически удаляет execution_count и outputs.

#   Конвертация в .py (jupyter nbconvert --to script).

#
# 16) Где посмотреть в какой ячейке ошибка?

#
#
# В Jupyter Notebook или VS Code при работе с ячейками Python вы можете
# увидеть, в какой ячейке произошла ошибка, с помощью следующих методов:
# 1. В Traceback (вывод ошибки)

# Когда возникает ошибка, появляется Traceback (стек вызовов), который
# показывает, в какой # ячейке она произошла:
#
#
# ---------------------------------------------------------------------------
# ZeroDivisionError                         Traceback (most recent call last)
# Cell In [3], line 1
# ----> 1 x = 1 / 0
# ZeroDivisionError: division by zero

#
#
# В данном примере ошибка произошла в ячейке с номером In [3].
#
# 2. В Jupyter (или VS Code, если используется Jupyter Kernel)

# В выводе ошибки будет указано Cell In [X], где X — номер ячейки,
# вызвавшей ошибку.

#    Также будет показан вывод ошибки, что поможет найти её источник.
#
# 3. В Interactive Window (VS Code)

# Если используете Interactive Window или Jupyter Kernel в VS Code, номер
# ячейки будет виден в выводе ошибки:
#
# In [3]: x = 1 / 0

# 4. В .ipynb файле (JSON-структура)
# Если открыть файл .ipynb в текстовом редакторе, можно найти в
# метаданных ячейки строку:

# 17 Как запустить терминал?
# Чтобы запустить терминал в VS Code, выполните следующие шаги:
# 1. Через командную палитру:

#    Нажмите Ctrl + Shift + P (или Cmd + Shift + P на Mac), чтобы открыть
#
# Командную палитру.

#    Введите команду "Terminal: New Terminal" и нажмите Enter.

# 2. Через меню:

#    Перейдите в верхнее меню View.

#    Выберите Terminal.

# 3. С помощью горячих клавиш:

#    Windows/Linux: Нажмите Ctrl + ~ (клавиша тильда, рядом с клавишей 1).

#    Mac: Нажмите Cmd + ~.

# 4. Открытие терминала в папке проекта:

# Если вы хотите открыть терминал, привязанный к текущей рабочей
# директории проекта:

#    Щелкните правой кнопкой мыши в Explorer в VS Code.

#    Выберите "Open in Integrated Terminal".

# 18 Что такое линтер?
# Линтер — это инструмент для анализа исходного кода с целью нахождения ошибок
# нарушений стиля и других потенциальных проблем. Линтеры помогают улучшить
# качество кода, обеспечивая его соответствие определённым стандартам и best
#
# practices.

# Основные функции линтера:

#    Поиск синтаксических ошибок: Линтер проверяет код на наличие
# синтаксических ошибок, таких как пропущенные скобки или неправильное
# использование ключевых слов.

#    Проверка стиля кода: Линтер проверяет, соответствует ли код стилевым
# рекомендациям, таким как отступы, длина строк, имена переменных и другие
# аспекты (например, PEP 8 для Python).

#    Поиск потенциальных проблем: Например, использование неинициализированных
# переменных, дублирование кода, неоптимальные конструкции.

#    Предупреждения о возможных ошибках: Например, в случае использования
# устаревших или небезопасных функций.

# Примеры популярных линтеров:

#    Pylint: Для Python, анализирует ошибки и стиль кода.

#    Flake8: Компактный линтер для Python, объединяет проверки
# синтаксиса и стиля.

#    ESLint: Линтер для JavaScript.

#    Rubocop: Для Ruby.


# 20) Секция pydocstyle в большинстве случаев автоматически закрывается после
# исправления ошибок в каком линтере?

# Секция pydocstyle автоматически закрывается при использовании pydocstyle
# в качестве линтера. pydocstyle проверяет соответствие кода стандартам
# написания docstring в Python, и после того как все ошибки исправлены, линтер
# обычно не выводит предупреждений. После исправления ошибок, линтер
# автоматически завершает свою работу.

# 21 Что такое описание модуля? Оно должно отражать информацию о том, что
# находится в модуле?

# Описание модуля — это строка документации (docstring), которая находится в
# начале файла модуля. Она служит для того, чтобы дать краткую информацию
# о том, что делает модуль, какие функции, классы или переменные он содержит
# и для чего они предназначены. Да, описание модуля должно отражать основную
# информацию о его содержимом, целях и использовании.

# 22) С какой git команды начинается утро программиста?

# Утро программиста часто начинается с команды git pull. Эта команда обновляет
# локальную версию репозитория, подтягивая изменения с удалённого репозитория
# (например, с GitHub), чтобы синхронизировать вашу локальную копию с
# последними изменениями, внесёнными другими разработчиками.
